/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ISoundCreatorV1,
  ISoundCreatorV1Interface,
} from "../../../../contracts/core/interfaces/ISoundCreatorV1";

const _abi = [
  {
    inputs: [],
    name: "ArrayLengthsMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "ImplementationAddressCantBeZero",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "soundEdition",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "initData",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "contracts",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    name: "SoundEditionCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "SoundEditionImplementationSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes",
      },
      {
        internalType: "address[]",
        name: "contracts",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "createSoundAndMints",
    outputs: [
      {
        internalType: "address",
        name: "soundEdition",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "setEditionImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "by",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "soundEditionAddress",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "soundEditionImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ISoundCreatorV1__factory {
  static readonly abi = _abi;
  static createInterface(): ISoundCreatorV1Interface {
    return new utils.Interface(_abi) as ISoundCreatorV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISoundCreatorV1 {
    return new Contract(address, _abi, signerOrProvider) as ISoundCreatorV1;
  }
}
