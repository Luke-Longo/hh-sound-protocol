/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ISoundCreatorV1Interface extends utils.Interface {
  functions: {
    "createSoundAndMints(bytes32,bytes,address[],bytes[])": FunctionFragment;
    "setEditionImplementation(address)": FunctionFragment;
    "soundEditionAddress(address,bytes32)": FunctionFragment;
    "soundEditionImplementation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSoundAndMints"
      | "setEditionImplementation"
      | "soundEditionAddress"
      | "soundEditionImplementation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSoundAndMints",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEditionImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "soundEditionAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "soundEditionImplementation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createSoundAndMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEditionImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "soundEditionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "soundEditionImplementation",
    data: BytesLike
  ): Result;

  events: {
    "SoundEditionCreated(address,address,bytes,address[],bytes[],bytes[])": EventFragment;
    "SoundEditionImplementationSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SoundEditionCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SoundEditionImplementationSet"
  ): EventFragment;
}

export interface SoundEditionCreatedEventObject {
  soundEdition: string;
  deployer: string;
  initData: string;
  contracts: string[];
  data: string[];
  results: string[];
}
export type SoundEditionCreatedEvent = TypedEvent<
  [string, string, string, string[], string[], string[]],
  SoundEditionCreatedEventObject
>;

export type SoundEditionCreatedEventFilter =
  TypedEventFilter<SoundEditionCreatedEvent>;

export interface SoundEditionImplementationSetEventObject {
  newImplementation: string;
}
export type SoundEditionImplementationSetEvent = TypedEvent<
  [string],
  SoundEditionImplementationSetEventObject
>;

export type SoundEditionImplementationSetEventFilter =
  TypedEventFilter<SoundEditionImplementationSetEvent>;

export interface ISoundCreatorV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISoundCreatorV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSoundAndMints(
      salt: PromiseOrValue<BytesLike>,
      initData: PromiseOrValue<BytesLike>,
      contracts: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEditionImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    soundEditionAddress(
      by: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { addr: string; exists: boolean }>;

    soundEditionImplementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createSoundAndMints(
    salt: PromiseOrValue<BytesLike>,
    initData: PromiseOrValue<BytesLike>,
    contracts: PromiseOrValue<string>[],
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEditionImplementation(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  soundEditionAddress(
    by: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { addr: string; exists: boolean }>;

  soundEditionImplementation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createSoundAndMints(
      salt: PromiseOrValue<BytesLike>,
      initData: PromiseOrValue<BytesLike>,
      contracts: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [string, string[]] & { soundEdition: string; results: string[] }
    >;

    setEditionImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    soundEditionAddress(
      by: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { addr: string; exists: boolean }>;

    soundEditionImplementation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SoundEditionCreated(address,address,bytes,address[],bytes[],bytes[])"(
      soundEdition?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      initData?: null,
      contracts?: null,
      data?: null,
      results?: null
    ): SoundEditionCreatedEventFilter;
    SoundEditionCreated(
      soundEdition?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      initData?: null,
      contracts?: null,
      data?: null,
      results?: null
    ): SoundEditionCreatedEventFilter;

    "SoundEditionImplementationSet(address)"(
      newImplementation?: null
    ): SoundEditionImplementationSetEventFilter;
    SoundEditionImplementationSet(
      newImplementation?: null
    ): SoundEditionImplementationSetEventFilter;
  };

  estimateGas: {
    createSoundAndMints(
      salt: PromiseOrValue<BytesLike>,
      initData: PromiseOrValue<BytesLike>,
      contracts: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEditionImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    soundEditionAddress(
      by: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    soundEditionImplementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSoundAndMints(
      salt: PromiseOrValue<BytesLike>,
      initData: PromiseOrValue<BytesLike>,
      contracts: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEditionImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    soundEditionAddress(
      by: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    soundEditionImplementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
