/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ISoundFeeRegistryInterface extends utils.Interface {
  functions: {
    "platformFee(uint128)": FunctionFragment;
    "platformFeeBPS()": FunctionFragment;
    "setPlatformFeeBPS(uint16)": FunctionFragment;
    "setSoundFeeAddress(address)": FunctionFragment;
    "soundFeeAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "platformFee"
      | "platformFeeBPS"
      | "setPlatformFeeBPS"
      | "setSoundFeeAddress"
      | "soundFeeAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "platformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeBPS",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSoundFeeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "soundFeeAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSoundFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "soundFeeAddress",
    data: BytesLike
  ): Result;

  events: {
    "PlatformFeeSet(uint16)": EventFragment;
    "SoundFeeAddressSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PlatformFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoundFeeAddressSet"): EventFragment;
}

export interface PlatformFeeSetEventObject {
  platformFeeBPS: number;
}
export type PlatformFeeSetEvent = TypedEvent<
  [number],
  PlatformFeeSetEventObject
>;

export type PlatformFeeSetEventFilter = TypedEventFilter<PlatformFeeSetEvent>;

export interface SoundFeeAddressSetEventObject {
  soundFeeAddress: string;
}
export type SoundFeeAddressSetEvent = TypedEvent<
  [string],
  SoundFeeAddressSetEventObject
>;

export type SoundFeeAddressSetEventFilter =
  TypedEventFilter<SoundFeeAddressSetEvent>;

export interface ISoundFeeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISoundFeeRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    platformFee(
      requiredEtherValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    platformFeeBPS(overrides?: CallOverrides): Promise<[number]>;

    setPlatformFeeBPS(
      platformFeeBPS_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSoundFeeAddress(
      soundFeeAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    soundFeeAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  platformFee(
    requiredEtherValue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  platformFeeBPS(overrides?: CallOverrides): Promise<number>;

  setPlatformFeeBPS(
    platformFeeBPS_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSoundFeeAddress(
    soundFeeAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  soundFeeAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    platformFee(
      requiredEtherValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformFeeBPS(overrides?: CallOverrides): Promise<number>;

    setPlatformFeeBPS(
      platformFeeBPS_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSoundFeeAddress(
      soundFeeAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    soundFeeAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PlatformFeeSet(uint16)"(platformFeeBPS?: null): PlatformFeeSetEventFilter;
    PlatformFeeSet(platformFeeBPS?: null): PlatformFeeSetEventFilter;

    "SoundFeeAddressSet(address)"(
      soundFeeAddress?: null
    ): SoundFeeAddressSetEventFilter;
    SoundFeeAddressSet(soundFeeAddress?: null): SoundFeeAddressSetEventFilter;
  };

  estimateGas: {
    platformFee(
      requiredEtherValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformFeeBPS(overrides?: CallOverrides): Promise<BigNumber>;

    setPlatformFeeBPS(
      platformFeeBPS_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSoundFeeAddress(
      soundFeeAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    soundFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    platformFee(
      requiredEtherValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformFeeBPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPlatformFeeBPS(
      platformFeeBPS_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSoundFeeAddress(
      soundFeeAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    soundFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
